{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intruduction","text":""},{"location":"#pycookiex","title":"pycookiex","text":"<p>Yet another Python cookiecutter \ud83d\udc0d \ud83c\udf6a</p>"},{"location":"#features","title":"\ud83c\udfaf Features","text":"<ul> <li>structured project:<ul> <li>license: MIT, Apache-2.0, GPL, ...</li> </ul> </li> <li>hooks: pre-commit</li> <li>testing: pytest, pytest-cov</li> <li>linting: ruff check</li> <li>typing: mypy</li> <li>formatting: ruff format</li> <li>documentation: mkdocs, mkdocs-material, mkdocstrings</li> <li>ci: GitHub Actions<ul> <li>per each PR: checkers (linting, formatting, hooks, docs build), tests</li> </ul> </li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>cookiecutter for baking project</li> </ul>"},{"location":"#usage","title":"\ud83c\udfc3 Usage","text":"<p>Start your project by running:</p> <pre><code>cookiecutter https://github.com/budivoy/pycookiex\n</code></pre> <p>This will prompt you to fill out a few details about your new Python package, then set up everything automatically.</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>Created by budivoy - feel free to reach out!</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>structuted project:<ul> <li>license: MIT, Apache-2.0, GPL, ...</li> </ul> </li> <li>hooks: pre-commit</li> <li>testing: pytest, pytest-cov</li> <li>linting: ruff check</li> <li>typing: mypy</li> <li>formatting: ruff format</li> <li>documentation: mkdocs, mkdocs-material, mkdocstrings</li> <li>ci: GitHub Actions<ul> <li>per each PR: checkers (linting, formatting, hooks, docs build), tests</li> </ul> </li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Aleksandr Popov</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"examples/docstring_examples/","title":"Docstring Example","text":"<p>This module provides examples of various Python constructs with Google-style docstrings.</p> <p>It includes examples of a function, a class with methods, an enum, a data class, an abstract class, and a generator function.</p>"},{"location":"examples/docstring_examples/#examples.docstring_example.AbstractExample","title":"<code>AbstractExample</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract class that defines a template for subclasses.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>class AbstractExample(ABC):\n  \"\"\"An abstract class that defines a template for subclasses.\"\"\"\n\n  @abstractmethod\n  def do_something(self) -&gt; str:\n    \"\"\"Abstract method that must be implemented by subclasses.\n\n    Returns:\n        str: A description of the action performed.\n    \"\"\"\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.AbstractExample.do_something","title":"<code>do_something() -&gt; str</code>  <code>abstractmethod</code>","text":"<p>Abstract method that must be implemented by subclasses.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A description of the action performed.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>@abstractmethod\ndef do_something(self) -&gt; str:\n  \"\"\"Abstract method that must be implemented by subclasses.\n\n  Returns:\n      str: A description of the action performed.\n  \"\"\"\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ConcreteExample","title":"<code>ConcreteExample</code>","text":"<p>               Bases: <code>AbstractExample</code></p> <p>A concrete implementation of the AbstractExample class.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>class ConcreteExample(AbstractExample):\n  \"\"\"A concrete implementation of the AbstractExample class.\"\"\"\n\n  def do_something(self) -&gt; str:\n    \"\"\"Performs a specific action.\n\n    Returns:\n        str: A description of the action performed.\n    \"\"\"\n    return 'Doing something concrete!'\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ConcreteExample.do_something","title":"<code>do_something() -&gt; str</code>","text":"<p>Performs a specific action.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A description of the action performed.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>def do_something(self) -&gt; str:\n  \"\"\"Performs a specific action.\n\n  Returns:\n      str: A description of the action performed.\n  \"\"\"\n  return 'Doing something concrete!'\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleClass","title":"<code>ExampleClass</code>","text":"<p>A class that demonstrates methods, read-only and read-write attributes.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>class ExampleClass:\n  \"\"\"A class that demonstrates methods, read-only and read-write attributes.\"\"\"\n\n  def __init__(self, name: str, age: int) -&gt; None:\n    \"\"\"Initializes the ExampleClass with a name and age.\n\n    Args:\n        name: The name of the person.\n        age: The age of the person.\n\n    Raises:\n        ValueError: If age is negative.\n    \"\"\"\n    if age &lt; 0:\n      error_message = 'Age cannot be negative'\n      raise ValueError(error_message)\n    self._name = name\n    self._age = age\n    self._read_write_attr = 'Default Value'\n\n  @property\n  def name(self) -&gt; str:\n    \"\"\"str: The read-only name attribute.\"\"\"\n    return self._name\n\n  @property\n  def age(self) -&gt; int:\n    \"\"\"int: The read-write age attribute.\"\"\"\n    return self._age\n\n  @age.setter\n  def age(self, value: int) -&gt; None:\n    \"\"\"Sets the age attribute.\n\n    Args:\n        value: The new age value.\n\n    Raises:\n        ValueError: If the new age value is negative.\n    \"\"\"\n    if value &lt; 0:\n      error_message = 'Age cannot be negative'\n      raise ValueError(error_message)\n    self._age = value\n\n  @property\n  def read_write_attr(self) -&gt; str:\n    \"\"\"str: A read-write attribute.\"\"\"\n    return self._read_write_attr\n\n  @read_write_attr.setter\n  def read_write_attr(self, value: str) -&gt; None:\n    \"\"\"Sets the read-write attribute.\n\n    Args:\n        value: The new value for the attribute.\n    \"\"\"\n    self._read_write_attr = value\n\n  def greet(self) -&gt; str:\n    \"\"\"Generates a greeting string.\n\n    Returns:\n        str: A greeting message that includes the name and age.\n    \"\"\"\n    return f'Hello, my name is {self.name} and I am {self.age} years old.'\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleClass.age","title":"<code>age: int</code>  <code>property</code> <code>writable</code>","text":"<p>int: The read-write age attribute.</p>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleClass.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>str: The read-only name attribute.</p>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleClass.read_write_attr","title":"<code>read_write_attr: str</code>  <code>property</code> <code>writable</code>","text":"<p>str: A read-write attribute.</p>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleClass.__init__","title":"<code>__init__(name: str, age: int) -&gt; None</code>","text":"<p>Initializes the ExampleClass with a name and age.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the person.</p> required <code>age</code> <code>int</code> <p>The age of the person.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If age is negative.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>def __init__(self, name: str, age: int) -&gt; None:\n  \"\"\"Initializes the ExampleClass with a name and age.\n\n  Args:\n      name: The name of the person.\n      age: The age of the person.\n\n  Raises:\n      ValueError: If age is negative.\n  \"\"\"\n  if age &lt; 0:\n    error_message = 'Age cannot be negative'\n    raise ValueError(error_message)\n  self._name = name\n  self._age = age\n  self._read_write_attr = 'Default Value'\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleClass.greet","title":"<code>greet() -&gt; str</code>","text":"<p>Generates a greeting string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A greeting message that includes the name and age.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>def greet(self) -&gt; str:\n  \"\"\"Generates a greeting string.\n\n  Returns:\n      str: A greeting message that includes the name and age.\n  \"\"\"\n  return f'Hello, my name is {self.name} and I am {self.age} years old.'\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleDataClass","title":"<code>ExampleDataClass</code>  <code>dataclass</code>","text":"<p>An example data class that holds data.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>@dataclass\nclass ExampleDataClass:\n  \"\"\"An example data class that holds data.\"\"\"\n\n  id: int\n  name: str\n  active: bool = True\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.ExampleEnum","title":"<code>ExampleEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>An example enum to represent some constant values.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>class ExampleEnum(Enum):\n  \"\"\"An example enum to represent some constant values.\"\"\"\n\n  VALUE_ONE = 1\n  VALUE_TWO = 2\n  VALUE_THREE = 3\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.example_function","title":"<code>example_function(param1: int, param2: str) -&gt; bool</code>","text":"<p>This function demonstrates a simple example of a function with parameters.</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <code>int</code> <p>The first parameter, an integer.</p> required <code>param2</code> <code>str</code> <p>The second parameter, a string.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Returns True if param1 is positive, otherwise False.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If param1 is negative.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>def example_function(param1: int, param2: str) -&gt; bool:\n  \"\"\"This function demonstrates a simple example of a function with parameters.\n\n  Args:\n      param1: The first parameter, an integer.\n      param2: The second parameter, a string.\n\n  Returns:\n      bool: Returns True if param1 is positive, otherwise False.\n\n  Raises:\n      ValueError: If param1 is negative.\n  \"\"\"\n  if not param2:\n    error_message = 'param1 must be non-negative'\n    raise ValueError(error_message)\n  return param1 &gt; 0\n</code></pre>"},{"location":"examples/docstring_examples/#examples.docstring_example.example_generator","title":"<code>example_generator(n: int) -&gt; Generator[int, None, None]</code>","text":"<p>A generator function that yields numbers from 0 to n-1.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The upper limit for generating numbers (exclusive).</p> required <p>Yields:</p> Name Type Description <code>int</code> <code>int</code> <p>The next number in the sequence.</p> Source code in <code>examples/docstring_example.py</code> <pre><code>def example_generator(n: int) -&gt; Generator[int, None, None]:\n  \"\"\"A generator function that yields numbers from 0 to n-1.\n\n  Args:\n      n: The upper limit for generating numbers (exclusive).\n\n  Yields:\n      int: The next number in the sequence.\n  \"\"\"\n  yield from range(n)\n</code></pre>"}]}