[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author }}"]
license = "{{ cookiecutter.license }}"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
toml = "^0.10.2"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
ruff = "^0.6.1"
mypy = "^1.11.1"
types-toml = "^0.10.8"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.31"
mkdocstrings = { version = "^0.25.2", extras = ["python"] }

[tool.pytest.ini_options]
# Run tests inside "tests" folder and measure lines/branch coverage, output result to terminal
testpaths = ["tests/"]
addopts = "--cov={{ cookiecutter.package_name}} --cov-branch --cov-report=term-missing"

[tool.ruff]
target-version = "py312"
indent-width = 2
line-length = 119

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = ["ISC001", "COM812"]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101", # "Use of `assert` detected"
    "ARG",  # "Unused function argument". Fixtures are often unused.
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.format]
# Prefer single quotes over double quotes.
quote-style = "single"

[tool.mypy]
python_version = "3.12"
plugins = []

# Enforce strict type checking
strict = true

# Files or directories to check
files = ["{{ cookiecutter.package_name }}", "tests"]

# Advanced mypy options for optimal type safety
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true

# Handle third-party libraries
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
